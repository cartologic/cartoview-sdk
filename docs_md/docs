<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

### Table of Contents

-   [AnimationHelper][1]
    -   [flash][2]
    -   [flyTo][3]
-   [BasicViewerHelper][4]
    -   [getCenterOfExtent][5]
    -   [mapInit][6]
    -   [resizeSendThumbnail][7]
    -   [setThumbnail][8]
    -   [getInteractions][9]
    -   [getMapDefaultConfig][10]
    -   [getMap][11]
    -   [getPrintMap][12]
    -   [zoomToLocation][13]
    -   [reprojectLocation][14]
    -   [reprojectExtent][15]
    -   [fitExtent][16]
    -   [exportMap][17]
-   [Config][18]
-   [mapProjection][19]
-   [mapProjection][20]
-   [getFormat][21]
-   [getFeatureInfoUrl][22]
-   [transformFeatures][23]
-   [getAtrributes][24]
-   [featureIdentify][25]
-   [getCRS][26]
-   [readFeaturesThenTransform][27]
-   [getCRSFToken][28]
-   [hasTrailingSlash][29]
-   [removeTrailingSlash][30]
-   [LayersHelper][31]
    -   [isWMSLayer][32]
    -   [layerName][33]
    -   [layerNameSpace][34]
    -   [getLayerURL][35]
    -   [getLocalLayers][36]
    -   [getBaseLayers][37]
    -   [getLayers][38]
    -   [getWMSLayer][39]
-   [Legend][40]
-   [Legend][41]
-   [MapConfigTransformService][42]
-   [URLS][43]
    -   [encodeURL][44]
    -   [getParamterizedURL][45]
    -   [getProxiedURL][46]
-   [convToDegree][47]
-   [convToRadian][48]
-   [moveTopRight][49]
-   [moveTopLeft][50]
-   [moveBottomRight][51]
-   [moveBottomLeft][52]
-   [doGet][53]
-   [doExternalGet][54]
-   [capitalizeFirstLetter][55]
-   [doPost][56]
-   [downloadFile][57]
-   [copyToClipboard][58]

## AnimationHelper

Class for Animation manipulation

### flash

This function add flash style to feature (point)

**Parameters**

-   `feature` **ol.Feature** 
-   `map` **ol.Map** 

Returns **void** 

### flyTo

This function apply animation fly when zoom to feature

**Parameters**

-   `location` **[Array][59]&lt;[Number][60]>** 
-   `view` **ol.View** 
-   `zoom` **[Number][60]** 
-   `done` **[Boolean][61]** 

Returns **void** 

## BasicViewerHelper

Class for Basic Viewer main Operation

### getCenterOfExtent

This function return center of extent

**Parameters**

-   `ext`  
-   `extent` **ol.Extent** openlayers extent

Returns **[Array][59]&lt;[Number][60]>** 

### mapInit

This function initialize openlayer map instance from geonode json obj

**Parameters**

-   `mapJsonUrl` **[string][62]** url to get geonode json object from
-   `map` **ol.Map** openlayers map instance
-   `proxyURL` **[string][62]** proxy url
-   `access_token` **[string][62]** user access token
-   `callback` **[Function][63]** function to be invoked after initializtion (optional, default `()=>{}`)

Returns **void** 

### resizeSendThumbnail

This function get map as images resizing it and sending it to the server

**Parameters**

-   `originalCanvas` **[HTMLCanvasElement][64]** 
-   `thumnailURL` **[string][62]** save thumbnail url

Returns **[Promise][65]** 

### setThumbnail

This function get map as images resizing it and sending it to the server

**Parameters**

-   `map` **ol.Map** openlayers map instance
-   `thumnailURL` **[string][62]** save thumbnail url

Returns **[Promise][65]** 

### getInteractions

This function return array of openlayers interactions based on configuration object

**Parameters**

-   `config` **[Config][66]** 

Returns **[Promise][65]** 

### getMapDefaultConfig

This function return default configuration object

Returns **[Config][66]** 

### getMap

This function return openlayers map instance based on configuration

**Parameters**

-   `config` **[Config][66]**  (optional, default `this.getMapDefaultConfig()`)

Returns **ol.Map** 

### getPrintMap

This function return openlayers map instance for print

Returns **ol.Map** 

### zoomToLocation

This function fit map view to point or coordinate

**Parameters**

-   `pointArray` **[Array][59]&lt;[Number][60]>** 
-   `map` **ol.Map** 
-   `changeZoom` **[Boolean][61]**  (optional, default `true`)

Returns **void** 

### reprojectLocation

This function reproject coordinates from projection to map projection

**Parameters**

-   `pointArray` **[Array][59]&lt;[Number][60]>** 
-   `map` **ol.Map** 
-   `from` **([string][62] | ol.ProjectionLike)**  (optional, default `'EPSG:4326'`)

Returns **[Array][59]&lt;[Number][60]>** 

### reprojectExtent

This function reproject extent from projection to map projection

**Parameters**

-   `extent` **ol.Extent** 
-   `map` **ol.Map** 
-   `from` **([string][62] | ol.ProjectionLike)**  (optional, default `'EPSG:4326'`)

Returns **ol.Extent** 

### fitExtent

This function fit map view to extent

**Parameters**

-   `extent` **ol.Extent** 
-   `map` **ol.Map** 
-   `duration` **[Number][60]**  (optional, default `undefined`)

Returns **void** 

### exportMap

This function save map as png

**Parameters**

-   `map` **ol.Map** 

Returns **void** 

## Config

This function return array of openlayers controls based on configuration object

Type: [Object][67]

**Parameters**

-   `config` **[Config][66]** 

**Properties**

-   `minZoom` **[Number][60]** minimum zoom of map
-   `maxZoom` **[Number][60]** maximum zoom of map
-   `zoom` **[Number][60]** initial zoom of map
-   `scaleLine` **[Boolean][61]** scaleline control
-   `zoomSlider` **[Boolean][61]** zoom slider control
-   `fullScreen` **[Boolean][61]** fullScreen control
-   `dragRotateAndZoom` **[Boolean][61]** dragRotateAndZoom interaction
-   `zoom` **Zoom** zoom configuration

Returns **[Promise][65]** 

## mapProjection

Reproject x,y .

**Parameters**

-   `point` **[array][59]** [longitude,latitude].

## mapProjection

Reproject extent .

**Parameters**

-   `extent` **[array][59]** [minX,minY,maxX,maxY].

## 

Class for Features manipulation

## getFormat

This function return openlayers format

**Parameters**

-   `format` **[string][62]** desired format one of application/json or application/vnd.ogc.gml

Returns **ol.format** instance of openlayers format

## getFeatureInfoUrl

This function return feature info url

**Parameters**

-   `layer` **ol.layer** openlayers layer to get url from
-   `coordinate` **ol.Coordinate** coordinate
-   `view` **ol.View** view  map view
-   `infoFormat` **ol.format** format of result
-   `token` **[string][62]** user access token (optional, default `null`)
-   `featureCount` **[number][60]** max number of features to return (optional, default `null`)

Returns **[string][62]** 

## transformFeatures

This function return feature info url

**Parameters**

-   `layer` **ol.layer** openlayers layer to get url from
-   `features` **[Array][59]&lt;ol.Feature>** to be transformed
-   `map` **ol.Map** openlayers map instance
-   `crs` **[Number][60]** target Projection
-   `attributes` **[Array][59]** Layer Attributes (optional, default `[]`)

Returns **[Array][59]&lt;ol.Feature>** 

## getAtrributes

This function return feature info url

**Parameters**

-   `metaAtrributesURL` **[string][62]** layer attributes api url

Returns **[Promise][65]** 

## featureIdentify

This function used to identify features

**Parameters**

-   `map` **ol.Map** openlayers map instance
-   `coordinate` **ol.Coordinate** coordinate
-   `proxyURL` **[string][62]** view  map view (optional, default `null`)
-   `token` **[string][62]** user access token (optional, default `null`)
-   `metaAtrributesURL` **[string][62]** layer atrributes api url (optional, default `null`)

Returns **[Array][59]&lt;ol.Feature>** 

## getCRS

This function check if crs defiend or not , if not defined if define the crs and return it back

**Parameters**

-   `crs` **[Number][60]** projection number e.g 4326

Returns **[Promise][65]** 

## readFeaturesThenTransform

This function return feature info url

**Parameters**

-   `proxyURL` **[string][62]** user access token (optional, default `null`)
-   `layer` **ol.layer** openlayers layer to get url from
-   `coordinate` **ol.Coordinate** coordinate
-   `view` **ol.View** view  map view
-   `map` **ol.Map** openlayers map instance
-   `token`  
-   `attributes` **[Array][59]** layer attributes
-   `user` **[string][62]** access token

Returns **[Array][59]&lt;ol.Feature>** 

## getCRSFToken

this function get django csrf token from cookie

Returns **[string][62]** return django csrf token

## hasTrailingSlash

this function check if URL has a slash at the end

**Parameters**

-   `str` **[string][62]** url to check

Returns **bool** return true if has Trailing Slash, false if not

## removeTrailingSlash

this function check if URL has a slash at the end

**Parameters**

-   `str` **[string][62]** url to remove slash from

Returns **[string][62]** 

## LayersHelper

Class for Layers manipulation

### isWMSLayer

this function check if layer is a wms layer

**Parameters**

-   `layer` **ol.layer** to be checked if it is wms layer or not

Returns **bool** 

### layerName

this function return layer name from geoserver typename

**Parameters**

-   `typeName` **[string][62]** layer typename

Returns **[string][62]** layer name

### layerNameSpace

this function return layer namespace/workspace from geoserver typename

**Parameters**

-   `typeName` **[string][62]** layer typename

Returns **[string][62]** namespace/workspace

### getLayerURL

this function return layer namespace/workspace from geoserver typename

**Parameters**

-   `layer` **ol.layer** layer object
-   `accessToken` **[string][62]** the geoserver accessToken (optional, default `null`)
-   `proxy` **[string][62]** geoserver proxy(geonode proxy) (optional, default `null`)

Returns **[string][62]** layer url

### getLocalLayers

this function return layer namespace/workspace from geoserver typename

**Parameters**

-   `map`  
-   `layer` **ol.Map** layer object

Returns **[Array][59]** map local layers (i.e layers without base layers)

### getBaseLayers

this function return layer namespace/workspace from geoserver typename

**Parameters**

-   `map`  
-   `layer` **ol.Map** layer object

Returns **[Array][59]** map base layers (ex:osm)

### getLayers

this function return map WMS layers from map layers

**Parameters**

-   `mapLayers` **[Array][59]&lt;ol.layer>** local layers

Returns **[Array][59]&lt;ol.layer>** array of WMS Layers

### getWMSLayer

this function search for a WMS layer with name

**Parameters**

-   `name` **[string][62]** LayerName
-   `layers`  

Returns **(ol.layer | null)** 

## Legend

this function return legends of layers

Type: [Object][67]

**Parameters**

-   `layer` **[Array][59]&lt;ol.layer>** local layers
-   `accessToken` **[string][62]** is the geoserver access token
-   `proxy` **[string][62]** is the geoserver proxy/geonode proxy

**Properties**

-   `layer` **[string][62]** The title of the layer
-   `url` **[string][62]** The url of the legend

Returns **[Array][59]&lt;[Legend][68]>** array of Legend

## Legend

this function return legend for layer

Type: [Object][67]

**Parameters**

-   `layer` **ol.layer** local layers
-   `accessToken` **[string][62]** is the geoserver access token
-   `proxy` **[string][62]** is the geoserver proxy/geonode proxy

**Properties**

-   `layer` **[string][62]** The title of the layer
-   `url` **[string][62]** The url of the legend

Returns **[Legend][68]** layer legend object

## MapConfigTransformService

Transforms GXP style map config to our internal format.

## URLS

Class for URLS manipulation

**Parameters**

-   `proxyURL` **([string][62] | null)** proxy (optional, default `null`)

### encodeURL

This function encodes special characters. In addition, it encodes the following characters: , / ? : @ & = + $ #

**Parameters**

-   `url` **[string][62]** url to encode

Returns **[string][62]** encoded url

### getParamterizedURL

This function add paramters to url as query string

**Parameters**

-   `url` **[string][62]** url to add paramters to
-   `query` **[object][67]** paramters to be added to the url

Returns **[string][62]** paramterized url

### getProxiedURL

This function add paramters to url as query string

**Parameters**

-   `url` **[string][62]** url to to be proxied

Returns **[string][62]** proxied url

## convToDegree

convert radian to degree

**Parameters**

-   `radian` **[Number][60]** angle in radian

Returns **[Number][60]** angle in degree

## convToRadian

convert degree to radian

**Parameters**

-   `degree` **[number][60]** angle in degree

Returns **[number][60]** angle in radian

## moveTopRight

Moves a vertex at an angle for a specific distance, 0 degrees points up and 180 degrees points down

**Parameters**

-   `point` **[Array][59]** Location on a cartesian graph formatted as [x, y]
-   `angle` **[Number][60]** Angle at which a point should move in degrees
-   `distance` **[Number][60]** How far should the point move at the given angle in pixels?

Returns **[Array][59]** Newly moved point formatted as [x, y]

## moveTopLeft

Moves a vertex at an angle for a specific distance, 0 degrees points up and 180 degrees points down

**Parameters**

-   `point` **[Array][59]** Location on a cartesian graph formatted as [x, y]
-   `angle` **[Number][60]** Angle at which a point should move in degrees
-   `distance` **[Number][60]** How far should the point move at the given angle in pixels?

Returns **[Array][59]** Newly moved point formatted as [x, y]

## moveBottomRight

Moves a vertex at an angle for a specific distance, 0 degrees points up and 180 degrees points down

**Parameters**

-   `point` **[Array][59]** Location on a cartesian graph formatted as [x, y]
-   `angle` **[Number][60]** Angle at which a point should move in degrees
-   `distance` **[Number][60]** How far should the point move at the given angle in pixels?

Returns **[Array][59]** Newly moved point formatted as [x, y]

## moveBottomLeft

Moves a vertex at an angle for a specific distance, 0 degrees points up and 180 degrees points down

**Parameters**

-   `point` **[Array][59]** Location on a cartesian graph formatted as [x, y]
-   `angle` **[Number][60]** Angle at which a point should move in degrees
-   `distance` **[Number][60]** How far should the point move at the given angle in pixels?

Returns **[Array][59]** Newly moved point formatted as [x, y]

## doGet

send get Request to an URL

**Parameters**

-   `url` **[string][62]** to send request to
-   `extraHeaders` **[object][67]** custom headers to add to the request (optional, default `{}`)
-   `type` **[string][62]** expected response type to parse (optional, default `'json'`)

Returns **[Promise][65]** result

## doExternalGet

send get Request to an External URL (i.e not on the same domain)

**Parameters**

-   `url` **[string][62]** to send request to
-   `extraHeaders` **[object][67]** custom headers to add to the request (optional, default `{}`)
-   `type` **[string][62]** expected response type to parse (optional, default `'json'`)

Returns **[Promise][65]** result

## capitalizeFirstLetter

capitalize First Letter of string

**Parameters**

-   `string` **[string][62]** the word to capitalize

Returns **[string][62]** capitalized word

## doPost

send post Request to an URL

**Parameters**

-   `url` **[string][62]** to send request to
-   `data`  
-   `extraHeaders` **[object][67]** custom headers to add to the request (optional, default `{}`)
-   `type` **[string][62]** expected response type to parse (optional, default `'json'`)

Returns **[Promise][65]** result

## downloadFile

Download binary data as file from the server

**Parameters**

-   `url` **[string][62]** to send request to
-   `fileName` **[string][62]** the desired name of the file
-   `data` **[string][62]** request body if you want to send post request (optional, default `null`)

Returns **void** 

## copyToClipboard

Copy data to system Clipboard

**Parameters**

-   `text` **[string][62]** text you want to copy (optional, default `''`)

Returns **[Promise][65]** 

[1]: #animationhelper

[2]: #flash

[3]: #flyto

[4]: #basicviewerhelper

[5]: #getcenterofextent

[6]: #mapinit

[7]: #resizesendthumbnail

[8]: #setthumbnail

[9]: #getinteractions

[10]: #getmapdefaultconfig

[11]: #getmap

[12]: #getprintmap

[13]: #zoomtolocation

[14]: #reprojectlocation

[15]: #reprojectextent

[16]: #fitextent

[17]: #exportmap

[18]: #config

[19]: #mapprojection

[20]: #mapprojection-1

[21]: #getformat

[22]: #getfeatureinfourl

[23]: #transformfeatures

[24]: #getatrributes

[25]: #featureidentify

[26]: #getcrs

[27]: #readfeaturesthentransform

[28]: #getcrsftoken

[29]: #hastrailingslash

[30]: #removetrailingslash

[31]: #layershelper

[32]: #iswmslayer

[33]: #layername

[34]: #layernamespace

[35]: #getlayerurl

[36]: #getlocallayers

[37]: #getbaselayers

[38]: #getlayers

[39]: #getwmslayer

[40]: #legend

[41]: #legend-1

[42]: #mapconfigtransformservice

[43]: #urls

[44]: #encodeurl

[45]: #getparamterizedurl

[46]: #getproxiedurl

[47]: #convtodegree

[48]: #convtoradian

[49]: #movetopright

[50]: #movetopleft

[51]: #movebottomright

[52]: #movebottomleft

[53]: #doget

[54]: #doexternalget

[55]: #capitalizefirstletter

[56]: #dopost

[57]: #downloadfile

[58]: #copytoclipboard

[59]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array

[60]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number

[61]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean

[62]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String

[63]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function

[64]: https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement

[65]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise

[66]: #config

[67]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object

[68]: #legend
